<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CannotConvert" xml:space="preserve">
    <value>Cannot convert '{0}' to {1}.</value>
    <comment>Cannot convert the value to the specified type.</comment>
  </data>
  <data name="CollectionArgumentIsNull" xml:space="preserve">
    <value>Missing collection.</value>
    <comment>The collection argument is missing or null.</comment>
  </data>
  <data name="ConnectionAborted" xml:space="preserve">
    <value>Connection aborted by client.</value>
    <comment>The connection was aborted by the client.</comment>
  </data>
  <data name="DuplicateParameterInPattern" xml:space="preserve">
    <value>Repeat parameters in path info expression {0}.</value>
    <comment>There is a duplicate parameter name in the path info expression.</comment>
  </data>
  <data name="DynamicPropertyNotFound" xml:space="preserve">
    <value>Property {0} not found.</value>
    <comment>The specified property was not found.</comment>
  </data>
  <data name="FileNotFound" xml:space="preserve">
    <value>File {0} was not found.</value>
    <comment>Specified file was not found.</comment>
  </data>
  <data name="KeyArgumentIsNull" xml:space="preserve">
    <value>Missing key.</value>
    <comment>The key argument is missing or null.</comment>
  </data>
  <data name="KeyNotFound" xml:space="preserve">
    <value>Key {0} not found in collection.</value>
    <comment>The specified key is not found in the collection.</comment>
  </data>
  <data name="LoggingProviderLocked" xml:space="preserve">
    <value>The logging provider must be set before any Grapevine action is taken.</value>
    <comment>The logging provider must be set before any Grapevine action is taken.</comment>
  </data>
  <data name="MatchingRoutes" xml:space="preserve">
    <value>{0} has {1} matching routes</value>
    <comment>The specified route has the specified number of matching routes.</comment>
  </data>
  <data name="MethodAcceptsMultipleArguments" xml:space="preserve">
    <value>{0}: must accept one and only one argument.</value>
    <comment>The method must accept one and only one argument.</comment>
  </data>
  <data name="MethodArgumentMustBeOfType" xml:space="preserve">
    <value>{0}: argument {1} must be of type {2}.</value>
    <comment>The argument at the specified index must be of the type specified.</comment>
  </data>
  <data name="MethodCannotBeInvoked" xml:space="preserve">
    <value>{0}: cannot be invoked.</value>
    <comment>The method cannot be invoked.</comment>
  </data>
  <data name="MethodDoesNotHaveParameterlessConstructor" xml:space="preserve">
    <value>{0}: does not have a parameterless constructor.</value>
    <comment>The method does not have a paramterless constructor.</comment>
  </data>
  <data name="MethodIsSpecial" xml:space="preserve">
    <value>{0}: may be treated in a special way by some compilers (such as property accessors and operator overloading methods).</value>
    <comment>The method is a special method (accessor or overloader).</comment>
  </data>
  <data name="MethodMissingAttribute" xml:space="preserve">
    <value>{0}: does not have the {1} attribute.</value>
    <comment>The method does not have the specified attribute.</comment>
  </data>
  <data name="MissingAppropriateConstructor" xml:space="preserve">
    <value>"{0} does not contain an appropriate constructor. (Constructor must accept {1} arguments: {2}</value>
    <comment>Specified type is missing a constructor that accepts the listed types.</comment>
  </data>
  <data name="NotEnumeratedType" xml:space="preserve">
    <value>T must be an enumerated type.</value>
    <comment>The generic type T must by an enumerated type.</comment>
  </data>
  <data name="PortIsInUse" xml:space="preserve">
    <value>Grapevine is unable to start because another process is already running on port {0}.</value>
    <comment>The specified port is already in use.</comment>
  </data>
  <data name="PortNumberNotInRange" xml:space="preserve">
    <value>must be an integer between {0} and {1}.</value>
    <comment>The port numbers specify exceed the range of available ports.</comment>
  </data>
  <data name="RestServerCanNotStartWhileStopping" xml:space="preserve">
    <value>Cannot start server until server has finished stopping.</value>
    <comment>Cannot start server until server has finished stopping.</comment>
  </data>
  <data name="RestServerCanNotStopWhileStarting" xml:space="preserve">
    <value>Cannot stop server until server has finished starting</value>
    <comment>Cannot stop server until server has finished starting</comment>
  </data>
  <data name="RouteGenerated" xml:space="preserve">
    <value>Generated route {0}.</value>
    <comment>The specified route was generated.</comment>
  </data>
  <data name="RouteInvoked" xml:space="preserve">
    <value>{0}/{1} {2}</value>
    <comment>The specifed sequence of the specified number of routes with the specified name was invoked.</comment>
  </data>
  <data name="RouteNotFound" xml:space="preserve">
    <value>Route Not Found For {0} {1}.</value>
    <comment>Specified route was not found.</comment>
  </data>
  <data name="ScanningSpecifiedAssembly" xml:space="preserve">
    <value>Scanning assembly {0} for routes.</value>
    <comment>The specified assembly is being scanned for routes.</comment>
  </data>
  <data name="ScanningSpecifiedClass" xml:space="preserve">
    <value>Scanning class {0} for routes.</value>
    <comment>The specified class is being scanned for rotues.</comment>
  </data>
  <data name="ScanningSpecifiedMethod" xml:space="preserve">
    <value>Scanning method {0} for routes.</value>
    <comment>The specified method is being scanned for routes.</comment>
  </data>
  <data name="ServerListening" xml:space="preserve">
    <value>Listening: {0}</value>
    <comment>The server is listening on the specified prefix.</comment>
  </data>
  <data name="ServerStateException" xml:space="preserve">
    <value>Host, Port and UseHttps properties cannot be modified while the server is running.</value>
    <comment>Host, Port and UseHttps properties cannot be modified while the server is running.</comment>
  </data>
  <data name="TotalAssembliesScannedForRoutes" xml:space="preserve">
    <value>Scanning {0} assemblies for routes.</value>
    <comment>Scanning the number of assemblies specified.</comment>
  </data>
  <data name="TotalRoutesFoundInAllAssemblies" xml:space="preserve">
    <value>Found {0} routes in all assemblies</value>
    <comment>The specified number of routes were identified in all assemblies.</comment>
  </data>
  <data name="TotalRoutesFoundInAssembly" xml:space="preserve">
    <value>Found {0} routes in assembly {1}.</value>
    <comment>The specified number of routes were identified in the specified assembly.</comment>
  </data>
  <data name="TotalRoutesFoundInClass" xml:space="preserve">
    <value>Found {0} routes in class {1}.</value>
    <comment>The specified number of routes were identified in the specified class.</comment>
  </data>
  <data name="TotalRoutesFoundInMethod" xml:space="preserve">
    <value>Found {0} routes for method {1}.</value>
    <comment>The specified number of routes were identified for the specified method.</comment>
  </data>
  <data name="TotalRoutesInvoked" xml:space="preserve">
    <value>{0} of {1} routes invoked</value>
    <comment>The specified number of routes out of the specified total number of routes were invoked.</comment>
  </data>
  <data name="UnableToStartRestServerOfType" xml:space="preserve">
    <value>An error occured when trying to start the {0}</value>
    <comment>Unable to start the rest server of the specified type.</comment>
  </data>
  <data name="UnableToStopRestServerOfType" xml:space="preserve">
    <value>An error occured while trying to stop {0}</value>
    <comment>Unable to stop the rest server of the specified type.</comment>
  </data>
  <data name="UnexpectedHttpListenerException" xml:space="preserve">
    <value>Unexpected HttpListenerException Occured (IsStopping:{0}, NativeErrorCode:{1})</value>
    <comment>An unexpected error occured, specifies whether the server is trying to stop and what the native error code is.</comment>
  </data>
  <data name="UnknownListenerException" xml:space="preserve">
    <value>An error occured while attempting to respond to the request</value>
    <comment>An unknown error occured while attempting to respond to the request.</comment>
  </data>
  <data name="UnrecoverableErrorWhenSendingResponse" xml:space="preserve">
    <value>An unrecoverable error occured while responding to the request.</value>
    <comment>An unrecoverable error occured while responding to the request. E.g., network connection was lost, etc.</comment>
  </data>
</root>